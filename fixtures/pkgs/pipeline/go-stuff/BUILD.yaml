packages:
  - name: step-one
    type: generic
    ephemeral: true
    config:
      script: |
        #!/bin/bash

        echo running step one
        cat <<EOF > main.go
        package main

        import (
          "fmt"
          "os"
          "strings"
        )

        func main() { fmt.Println(strings.Join(os.Environ(), "\n")) }
        EOF
  - name: step-two
    type: generic
    ephemeral: true
    deps:
      - :step-one
    buildEnv:
      docker:
        image: docker.io/library/golang:1.18@sha256:a452d6273ad03a47c2f29b898d6bb57630e77baf839651ef77d03e4e049c5bf3
    config:
      script: |
        #!/bin/bash

        set -x

        whoami

        cp fixtures-pkgs-pipeline-go-stuff--step-one/main.go .
        cat main.go
        go mod init foobar
        CGO_ENABLED=0 go build
        ls
  - name: step-three
    type: generic
    ephemeral: true
    deps:
      - :step-two
    buildEnv:
      docker:
        image: docker.io/library/golang:1.18@sha256:a452d6273ad03a47c2f29b898d6bb57630e77baf839651ef77d03e4e049c5bf3
    config:
      script: |-
        #!/bin/bash

        ./fixtures-pkgs-pipeline-go-stuff--step-two/foobar
