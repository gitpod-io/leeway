// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/reporter.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gitpod-io/leeway/pkg/remotereporter/api/gen/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReporterServiceName is the fully-qualified name of the ReporterService service.
	ReporterServiceName = "v1.ReporterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReporterServiceBuildStartedProcedure is the fully-qualified name of the ReporterService's
	// BuildStarted RPC.
	ReporterServiceBuildStartedProcedure = "/v1.ReporterService/BuildStarted"
	// ReporterServiceBuildFinishedProcedure is the fully-qualified name of the ReporterService's
	// BuildFinished RPC.
	ReporterServiceBuildFinishedProcedure = "/v1.ReporterService/BuildFinished"
	// ReporterServicePackageBuildStartedProcedure is the fully-qualified name of the ReporterService's
	// PackageBuildStarted RPC.
	ReporterServicePackageBuildStartedProcedure = "/v1.ReporterService/PackageBuildStarted"
	// ReporterServicePackageBuildLogProcedure is the fully-qualified name of the ReporterService's
	// PackageBuildLog RPC.
	ReporterServicePackageBuildLogProcedure = "/v1.ReporterService/PackageBuildLog"
	// ReporterServicePackageBuildFinishedProcedure is the fully-qualified name of the ReporterService's
	// PackageBuildFinished RPC.
	ReporterServicePackageBuildFinishedProcedure = "/v1.ReporterService/PackageBuildFinished"
)

// ReporterServiceClient is a client for the v1.ReporterService service.
type ReporterServiceClient interface {
	// BuildStarted is called when the build of a package is started by the user.
	// This is not the same as a dependency beeing built (see PackageBuildStarted for that).
	// The root package will also be passed into PackageBuildStarted once all its depepdencies
	// have been built.
	BuildStarted(context.Context, *connect_go.Request[v1.BuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// BuildFinished is called when the build of a package which was started by the user has finished.
	// This is not the same as a dependency build finished (see PackageBuildFinished for that).
	// The root package will also be passed into PackageBuildFinished once it's been built.
	BuildFinished(context.Context, *connect_go.Request[v1.BuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildStarted is called when a package build actually gets underway. At this point
	// all transitive dependencies of the package have been built.
	PackageBuildStarted(context.Context, *connect_go.Request[v1.PackageBuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildLog is called during a package build whenever a build command produced some output.
	PackageBuildLog(context.Context, *connect_go.Request[v1.PackageBuildLogRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildFinished is called when the package build has finished. If an error is passed in
	// the package build was not succesfull.
	PackageBuildFinished(context.Context, *connect_go.Request[v1.PackageBuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
}

// NewReporterServiceClient constructs a client for the v1.ReporterService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReporterServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReporterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reporterServiceClient{
		buildStarted: connect_go.NewClient[v1.BuildStartedRequest, v1.EmptyResponse](
			httpClient,
			baseURL+ReporterServiceBuildStartedProcedure,
			opts...,
		),
		buildFinished: connect_go.NewClient[v1.BuildFinishedRequest, v1.EmptyResponse](
			httpClient,
			baseURL+ReporterServiceBuildFinishedProcedure,
			opts...,
		),
		packageBuildStarted: connect_go.NewClient[v1.PackageBuildStartedRequest, v1.EmptyResponse](
			httpClient,
			baseURL+ReporterServicePackageBuildStartedProcedure,
			opts...,
		),
		packageBuildLog: connect_go.NewClient[v1.PackageBuildLogRequest, v1.EmptyResponse](
			httpClient,
			baseURL+ReporterServicePackageBuildLogProcedure,
			opts...,
		),
		packageBuildFinished: connect_go.NewClient[v1.PackageBuildFinishedRequest, v1.EmptyResponse](
			httpClient,
			baseURL+ReporterServicePackageBuildFinishedProcedure,
			opts...,
		),
	}
}

// reporterServiceClient implements ReporterServiceClient.
type reporterServiceClient struct {
	buildStarted         *connect_go.Client[v1.BuildStartedRequest, v1.EmptyResponse]
	buildFinished        *connect_go.Client[v1.BuildFinishedRequest, v1.EmptyResponse]
	packageBuildStarted  *connect_go.Client[v1.PackageBuildStartedRequest, v1.EmptyResponse]
	packageBuildLog      *connect_go.Client[v1.PackageBuildLogRequest, v1.EmptyResponse]
	packageBuildFinished *connect_go.Client[v1.PackageBuildFinishedRequest, v1.EmptyResponse]
}

// BuildStarted calls v1.ReporterService.BuildStarted.
func (c *reporterServiceClient) BuildStarted(ctx context.Context, req *connect_go.Request[v1.BuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return c.buildStarted.CallUnary(ctx, req)
}

// BuildFinished calls v1.ReporterService.BuildFinished.
func (c *reporterServiceClient) BuildFinished(ctx context.Context, req *connect_go.Request[v1.BuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return c.buildFinished.CallUnary(ctx, req)
}

// PackageBuildStarted calls v1.ReporterService.PackageBuildStarted.
func (c *reporterServiceClient) PackageBuildStarted(ctx context.Context, req *connect_go.Request[v1.PackageBuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return c.packageBuildStarted.CallUnary(ctx, req)
}

// PackageBuildLog calls v1.ReporterService.PackageBuildLog.
func (c *reporterServiceClient) PackageBuildLog(ctx context.Context, req *connect_go.Request[v1.PackageBuildLogRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return c.packageBuildLog.CallUnary(ctx, req)
}

// PackageBuildFinished calls v1.ReporterService.PackageBuildFinished.
func (c *reporterServiceClient) PackageBuildFinished(ctx context.Context, req *connect_go.Request[v1.PackageBuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return c.packageBuildFinished.CallUnary(ctx, req)
}

// ReporterServiceHandler is an implementation of the v1.ReporterService service.
type ReporterServiceHandler interface {
	// BuildStarted is called when the build of a package is started by the user.
	// This is not the same as a dependency beeing built (see PackageBuildStarted for that).
	// The root package will also be passed into PackageBuildStarted once all its depepdencies
	// have been built.
	BuildStarted(context.Context, *connect_go.Request[v1.BuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// BuildFinished is called when the build of a package which was started by the user has finished.
	// This is not the same as a dependency build finished (see PackageBuildFinished for that).
	// The root package will also be passed into PackageBuildFinished once it's been built.
	BuildFinished(context.Context, *connect_go.Request[v1.BuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildStarted is called when a package build actually gets underway. At this point
	// all transitive dependencies of the package have been built.
	PackageBuildStarted(context.Context, *connect_go.Request[v1.PackageBuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildLog is called during a package build whenever a build command produced some output.
	PackageBuildLog(context.Context, *connect_go.Request[v1.PackageBuildLogRequest]) (*connect_go.Response[v1.EmptyResponse], error)
	// PackageBuildFinished is called when the package build has finished. If an error is passed in
	// the package build was not succesfull.
	PackageBuildFinished(context.Context, *connect_go.Request[v1.PackageBuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error)
}

// NewReporterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReporterServiceHandler(svc ReporterServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	reporterServiceBuildStartedHandler := connect_go.NewUnaryHandler(
		ReporterServiceBuildStartedProcedure,
		svc.BuildStarted,
		opts...,
	)
	reporterServiceBuildFinishedHandler := connect_go.NewUnaryHandler(
		ReporterServiceBuildFinishedProcedure,
		svc.BuildFinished,
		opts...,
	)
	reporterServicePackageBuildStartedHandler := connect_go.NewUnaryHandler(
		ReporterServicePackageBuildStartedProcedure,
		svc.PackageBuildStarted,
		opts...,
	)
	reporterServicePackageBuildLogHandler := connect_go.NewUnaryHandler(
		ReporterServicePackageBuildLogProcedure,
		svc.PackageBuildLog,
		opts...,
	)
	reporterServicePackageBuildFinishedHandler := connect_go.NewUnaryHandler(
		ReporterServicePackageBuildFinishedProcedure,
		svc.PackageBuildFinished,
		opts...,
	)
	return "/v1.ReporterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReporterServiceBuildStartedProcedure:
			reporterServiceBuildStartedHandler.ServeHTTP(w, r)
		case ReporterServiceBuildFinishedProcedure:
			reporterServiceBuildFinishedHandler.ServeHTTP(w, r)
		case ReporterServicePackageBuildStartedProcedure:
			reporterServicePackageBuildStartedHandler.ServeHTTP(w, r)
		case ReporterServicePackageBuildLogProcedure:
			reporterServicePackageBuildLogHandler.ServeHTTP(w, r)
		case ReporterServicePackageBuildFinishedProcedure:
			reporterServicePackageBuildFinishedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReporterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReporterServiceHandler struct{}

func (UnimplementedReporterServiceHandler) BuildStarted(context.Context, *connect_go.Request[v1.BuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ReporterService.BuildStarted is not implemented"))
}

func (UnimplementedReporterServiceHandler) BuildFinished(context.Context, *connect_go.Request[v1.BuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ReporterService.BuildFinished is not implemented"))
}

func (UnimplementedReporterServiceHandler) PackageBuildStarted(context.Context, *connect_go.Request[v1.PackageBuildStartedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ReporterService.PackageBuildStarted is not implemented"))
}

func (UnimplementedReporterServiceHandler) PackageBuildLog(context.Context, *connect_go.Request[v1.PackageBuildLogRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ReporterService.PackageBuildLog is not implemented"))
}

func (UnimplementedReporterServiceHandler) PackageBuildFinished(context.Context, *connect_go.Request[v1.PackageBuildFinishedRequest]) (*connect_go.Response[v1.EmptyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("v1.ReporterService.PackageBuildFinished is not implemented"))
}
